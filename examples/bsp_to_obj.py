def write_obj(bsp): #TODO: write .mtl for each vmt
    start_time = time.time()
    total_faces = len(bsp.FACES)
    yield "# This model was generated by a python script\n"
    yield f"# From a Source Engine .bsp file ({bsp.filename})\n"
    vs = []
    v_count = 1
    vts = []
    vt_count = 1
    vns = []
    vn_count = 1
    faces_by_material = {} # {material: [face, ...], ...}
    disps_by_material = {} # {material: [face, ...], ...}
    for face in bsp.FACES:
        tex_info = bsp.TEXINFO[face.tex_info]
        tex_data = bsp.TEXDATA[tex_info.tex_data]
        material = bsp.TEXDATA_STRING_DATA[tex_data.tex_data_string_index]
        if face.disp_info != -1:
            if material not in disps_by_material:
                disps_by_material[material] = []
            disps_by_material[material].append(face)
        else:
            if material not in faces_by_material:
                faces_by_material[material] = []
            faces_by_material[material].append(face)
            
    face_count = 0
    current_progress = 0.1
    print('0...', end='')
    for material in faces_by_material:
        yield f"usemtl {material}\n"
        for face in faces_by_material[material]:
            face_vs = bsp.verts_of(face)
            vn = face_vs[0][1]
            if vn not in vns:
                vns.append(vn)
                yield f"vn {vector.vec3(*vn):}\n"
                vn = vn_count
                vn_count += 1
            else:
                vn = vns.index(vn) + 1
            f = []
            for vertex in face_vs:
                v = vertex[0]
                if v not in vs:
                    vs.append(v)
                    yield f"v {vector.vec3(*v):}\n"
                    v = v_count
                    v_count += 1
                else:
                    v = vs.index(v) + 1
                vt = vertex[2]
                if vt not in vts:
                    vts.append(vt)
                    yield f"vt {vector.vec2(*vt):}\n"
                    vt = vt_count
                    vt_count += 1
                else:
                    vt = vts.index(vt) + 1
                f.append((v, vt, vn))
            yield "f " + ' '.join([f"{v}/{vt}/{vn}" for v, vt, vn in reversed(f)]) + "\n"
            face_count += 1
            if face_count >= total_faces * current_progress:
                print(f'{current_progress * 10:.0f}...', end='')
                current_progress += 0.1

    disp_no = 0
    yield "g displacements\n"
    for material in disps_by_material:
        yield "usemtl {material}\n"
        for displacement in disps_by_material[material]:
            yield f"o displacement_{disp_no}\n"
            disp_no += 1
            disp_vs = bsp.dispverts_of(displacement)
            normal = disp_vs[0][1]
            if normal not in vns:
                vns.append(normal)
                yield f"vn {vector.vec3(*normal):}\n"
                normal = vn_count
                vn_count += 1
            else:
                normal = vns.index(normal) + 1
            f = []
            for v, vn, vt, vt2, colour in disp_vs:
                yield f"v {vector.vec3(*v):}\nvt {vector.vec2(*vt):}\n"
            power = bsp.DISP_INFO[displacement.disp_info].power
            disp_size = (2 ** power + 1) ** 2
            tris = disp_tris(range(disp_size), power)
            for A, B, C in zip(tris[::3], tris[1::3], tris[2::3]):
                A = (A + v_count, A + vt_count, normal)
                B = (B + v_count, B + vt_count, normal)
                C = (C + v_count, C + vt_count, normal)
                a, b, c = [map(str, i) for i in (c, b, a)]
                yield f"f {'/'.join(a)} {'/'.join(b)} {'/'.join(c)}\n"
            v_count += disp_size
            vt_count += disp_size
            face_count += 1
            if face_count >= total_faces * current_progress:
                print(f'{current_progress * 10:.0f}...', end='')
                current_progress += 0.1

    total_time = time.time() - start_time
    minutes = total_time // 60
    seconds = total_time - minutes * 60
    yield f"# file generated in {minutes:.0f} minutes {seconds:2.3f} seconds")
    print('Done!')



if __name__ == "__main__":
    import argparse
    # -g --game [tf2/hl2/vindictus]
    # -o --outfile
    ## 3 error levels -W -Warn
    # -W strict // stop if cannot load ANY chunk
    # -W lazy // ignore any and all chunks that cannot be loaded
    import sys
    import bsp_tool
    if len(sys.argv) > 1: # drag & drop obj converter
        for map_path in sys.argv[1:]:
            bsp = bsp_tool.bsp(map_path)
            
            start = time.time()
            obj_file = open(map_path + '.obj', 'w')
            buffer = ""
            for line in write_obj(bsp):
                buffer += line
                if len(buffer) > 2048:
                    obj_file.write(buffer)
                    buffer = ""
            obj_file.close()
            conversion_time = time.time() - start
            print(f'Converting {bsp.filename} took {conversion_time // 60:.0f}:{conversion_time % 60:.3f}')
    else:
        ... # do nothing (or uncomment tests)
