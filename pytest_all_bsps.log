============================= test session starts =============================
platform win32 -- Python 3.9.10, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- c:\users\jared\documents\github\bsp_tool\venv\scripts\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\Jared\Documents\GitHub\bsp_tool
plugins: cov-2.12.1
collecting ... collected 176 items

tests/test_bsp.py::test_load_bsp[./-tests/maps-map_dirs0] PASSED         [  0%]
tests/test_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-gesource-map_dirs1] PASSED [  1%]
tests/test_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-half-life 2 riot act-map_dirs2] PASSED [  1%]
tests/test_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-TFTS-map_dirs3] PASSED [  2%]
tests/test_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-episodeone-map_dirs4] PASSED [  2%]
tests/test_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-RunThinkShootLiveVille2-map_dirs5] PASSED [  3%]
tests/test_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-cromulentville2-map_dirs6] PASSED [  3%]
tests/test_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-companionpiece2-map_dirs7] PASSED [  4%]
tests/test_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-eyecandy-map_dirs8] PASSED [  5%]
tests/test_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-backontrack-map_dirs9] PASSED [  5%]
tests/test_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-tworooms-map_dirs10] PASSED [  6%]
tests/test_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-fusionville2-map_dirs11] PASSED [  6%]
tests/test_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-tunetwo-map_dirs12] PASSED [  7%]
tests/test_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-lvl2-map_dirs13] PASSED [  7%]
tests/test_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-thewrapuptwo-map_dirs14] PASSED [  8%]
tests/test_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-halloweenhorror4-map_dirs15] PASSED [  9%]
tests/test_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-halflifeeternal-map_dirs16] PASSED [  9%]
tests/test_bsp.py::test_load_bsp[C:/Program Files (x86)/Steam/steamapps/sourcemods-thelayout-map_dirs17] PASSED [ 10%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Cry of Fear-map_dirs18] PASSED [ 10%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life/cstrike-map_dirs19] PASSED [ 11%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life/czero-map_dirs20] PASSED [ 11%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life/czeror-map_dirs21] PASSED [ 12%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life/dmc-map_dirs22] PASSED [ 13%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life/dod-map_dirs23] PASSED [ 13%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life/gearbox-map_dirs24] PASSED [ 14%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life/ns-map_dirs25] PASSED [ 14%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life/ricochet-map_dirs26] PASSED [ 15%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life/tfc-map_dirs27] PASSED [ 15%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life/valve-map_dirs28] PASSED [ 16%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Halfquake Trilogy-map_dirs29] PASSED [ 17%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Sven Co-op-map_dirs30] PASSED [ 17%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Alien Swarm-map_dirs31] PASSED [ 18%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Alien Swarm Reactive Drop-map_dirs32] PASSED [ 18%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Blade Symphony-map_dirs33] PASSED [ 19%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Counter-Strike Global Offensive-map_dirs34] PASSED [ 19%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-counter-strike source-map_dirs35] PASSED [ 20%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-day of defeat source-map_dirs36] PASSED [ 21%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Double Action-map_dirs37] PASSED [ 21%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Fistful of Frags-map_dirs38] PASSED [ 22%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Fortress Forever-map_dirs39] PASSED [ 22%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-G String-map_dirs40] PASSED [ 23%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-GarrysMod-map_dirs41] PASSED [ 23%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life 1 Source Deathmatch-map_dirs42] PASSED [ 24%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-half-life 2/ep2-map_dirs43] PASSED [ 25%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-half-life 2/episodic-map_dirs44] PASSED [ 25%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-half-life 2/hl1-map_dirs45] PASSED [ 26%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-half-life 2/hl2-map_dirs46] PASSED [ 26%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-half-life 2/lostcoast-map_dirs47] PASSED [ 27%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-half-life 2 deathmatch-map_dirs48] PASSED [ 27%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Half-Life 2 Update-map_dirs49] PASSED [ 28%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-left 4 dead-map_dirs50] PASSED [ 28%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Left 4 Dead 2-map_dirs51] PASSED [ 29%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-MINERVA-map_dirs52] PASSED [ 30%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-NEOTOKYO-map_dirs53] PASSED [ 30%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-nmrih-map_dirs54] PASSED [ 31%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Portal-map_dirs55] PASSED [ 31%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Portal 2-map_dirs56] PASSED [ 32%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Portal Reloaded-map_dirs57] PASSED [ 32%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-SourceFilmmaker-map_dirs58] PASSED [ 33%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Synergy-map_dirs59] PASSED [ 34%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Team Fortress 2-map_dirs60] PASSED [ 34%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Transmissions Element 120-map_dirs61] PASSED [ 35%]
tests/test_bsp.py::test_load_bsp[D:/SteamLibrary/steamapps/common-Vampire The Masquerade - Bloodlines-map_dirs62] PASSED [ 35%]
tests/test_bsp.py::test_load_bsp[E:/Mod-Anachronox-map_dirs63] PASSED    [ 36%]
tests/test_bsp.py::test_load_bsp[E:/Mod-Daikatana-map_dirs64] PASSED     [ 36%]
tests/test_bsp.py::test_load_bsp[E:/Mod-HereticII-map_dirs65] PASSED     [ 37%]
tests/test_bsp.py::test_load_bsp[E:/Mod-Hexen2-map_dirs66] PASSED        [ 38%]
tests/test_bsp.py::test_load_bsp[E:/Mod-RTCW-map_dirs67] PASSED          [ 38%]
tests/test_bsp.py::test_load_bsp[E:/Mod-SiN-map_dirs68] PASSED           [ 39%]
tests/test_bsp.py::test_load_bsp[E:/Mod-SoF-map_dirs69] PASSED           [ 39%]
tests/test_bsp.py::test_load_bsp[E:/Mod-SoF2-map_dirs70] PASSED          [ 40%]
tests/test_bsp.py::test_load_bsp[E:/Mod-StarTrekEliteForce-map_dirs71] PASSED [ 40%]
tests/test_bsp.py::test_load_bsp[E:/Mod-Quake-map_dirs72] PASSED         [ 41%]
tests/test_bsp.py::test_load_bsp[E:/Mod-Quake/rerelease-map_dirs73] FAILED [ 42%]
tests/test_bsp.py::test_load_bsp[E:/Mod-Alkaline-map_dirs74] FAILED      [ 42%]
tests/test_bsp.py::test_load_bsp[E:/Mod-QuakeII-map_dirs75] PASSED       [ 43%]
tests/test_bsp.py::test_load_bsp[E:/Mod-QuakeIII-map_dirs76] PASSED      [ 43%]
tests/test_bsp.py::test_load_bsp[E:/Mod-QuakeLive-map_dirs77] PASSED     [ 44%]
tests/test_bsp.py::test_load_bsp[E:/Mod-Warsow-map_dirs78] FAILED        [ 44%]
tests/test_bsp.py::test_load_bsp[E:/Mod-WolfET-map_dirs79] PASSED        [ 45%]
tests/test_bsp.py::test_load_bsp[E:/Mod-WRATH-map_dirs80] PASSED         [ 46%]
tests/test_bsp.py::test_load_bsp[E:/Mod-CoD1-map_dirs81] PASSED          [ 46%]
tests/test_bsp.py::test_load_bsp[E:/Mod-CoD2-map_dirs82] PASSED          [ 47%]
tests/test_bsp.py::test_load_bsp[E:/Mod-CoD4-map_dirs83] PASSED          [ 47%]
tests/test_bsp.py::test_load_bsp[E:/Mod-Nightfire-map_dirs84] PASSED     [ 48%]
tests/test_bsp.py::test_load_bsp[E:/Mod-BlackMesa-map_dirs85] PASSED     [ 48%]
tests/test_bsp.py::test_load_bsp[E:/Mod-CSMalvinas-map_dirs86] PASSED    [ 49%]
tests/test_bsp.py::test_load_bsp[E:/Mod-CSO2-map_dirs87] FAILED          [ 50%]
tests/test_bsp.py::test_load_bsp[E:/Mod-DarkMessiah/singleplayer-map_dirs88] FAILED [ 50%]
tests/test_bsp.py::test_load_bsp[E:/Mod-DarkMessiah/multiplayer-map_dirs89] PASSED [ 51%]
tests/test_bsp.py::test_load_bsp[E:/Mod-HL2DM/patbytes-map_dirs90] PASSED [ 51%]
tests/test_bsp.py::test_load_bsp[E:/Mod-Infra-map_dirs91] PASSED         [ 52%]
tests/test_bsp.py::test_load_bsp[E:/Mod-SiNEpisodes-map_dirs92] PASSED   [ 52%]
tests/test_bsp.py::test_load_bsp[E:/Mod-TacticalIntervention-map_dirs93] PASSED [ 53%]
tests/test_bsp.py::test_load_bsp[E:/Mod-TeamFortressQuake-map_dirs94] PASSED [ 53%]
tests/test_bsp.py::test_load_bsp[E:/Mod-Vindictus-map_dirs95] FAILED     [ 54%]
tests/test_bsp.py::test_load_bsp[E:/Mod-Titanfall-map_dirs96] PASSED     [ 55%]
tests/test_bsp.py::test_load_bsp[E:/Mod-Titanfall/x360-map_dirs97] FAILED [ 55%]
tests/test_bsp.py::test_load_bsp[E:/Mod-TitanfallOnline-map_dirs98] PASSED [ 56%]
tests/test_bsp.py::test_load_bsp[E:/Mod-Titanfall2-map_dirs99] PASSED    [ 56%]
tests/test_bsp.py::test_load_bsp[E:/Mod-ApexLegends-map_dirs100] PASSED  [ 57%]
tests/test_bsp.py::test_load_bsp[E:/Mod-FAKK2-map_dirs101] PASSED        [ 57%]
tests/test_bsp.py::test_load_bsp[E:/Mod-Alice-map_dirs102] PASSED        [ 58%]
tests/test_bsp.py::test_load_bsp[E:/Mod-MoHAA-map_dirs103] PASSED        [ 59%]
tests/test_bsp.py::test_load_bsp[E:/Mod-StarTrekEliteForceII-map_dirs104] PASSED [ 59%]
tests/test_bsp.py::test_load_bsp[E:/Mod-StarWarsJediKnight-map_dirs105] PASSED [ 60%]
tests/test_bsp.py::test_load_bsp[E:/Mod-StarWarsJediKnightII-map_dirs106] PASSED [ 60%]
tests/test_bsp.py::test_load_bsp[E:/Mod/PS4-Titanfall2-map_dirs107] PASSED [ 61%]
tests/test_bsp.py::test_load_bsp[E:/Mod/PS4-Titanfall2_tech_test-map_dirs108] PASSED [ 61%]
tests/test_bsp.py::test_load_bsp[E:/Mod/X360-OrangeBox-map_dirs109] PASSED [ 62%]
tests/test_bsp.py::test_load_bsp[E:/Mod/X360-Portal2-map_dirs110] PASSED [ 63%]
tests/test_bsplump.py::TestRawBspLump::test_its_raw PASSED               [ 63%]
tests/test_bsplump.py::TestRawBspLump::test_list_conversion PASSED       [ 64%]
tests/test_bsplump.py::TestRawBspLump::test_indexing PASSED              [ 64%]
tests/test_bsplump.py::TestBspLump::test_list_conversion PASSED          [ 65%]
tests/test_bsplump.py::TestBspLump::test_indexing PASSED                 [ 65%]
tests/test_bsplump.py::TestBspLump::test_del PASSED                      [ 66%]
tests/test_bsplump.py::TestBspLump::test_setitem PASSED                  [ 67%]
tests/test_bsplump.py::TestBasicBspLump::test_its_basic PASSED           [ 67%]
tests/test_bsplump.py::TestBasicBspLump::test_list_conversion PASSED     [ 68%]
tests/test_bsplump.py::TestBasicBspLump::test_indexing PASSED            [ 68%]
tests/test_d3d_bsp.py::test_no_errors[d3dbsp0] PASSED                    [ 69%]
tests/test_d3d_bsp.py::test_no_errors[d3dbsp1] PASSED                    [ 69%]
tests/test_d3d_bsp.py::test_no_errors[d3dbsp2] PASSED                    [ 70%]
tests/test_d3d_bsp.py::test_no_errors[d3dbsp3] PASSED                    [ 71%]
tests/test_d3d_bsp.py::test_entites_loaded[d3dbsp0] PASSED               [ 71%]
tests/test_d3d_bsp.py::test_entites_loaded[d3dbsp1] PASSED               [ 72%]
tests/test_d3d_bsp.py::test_entites_loaded[d3dbsp2] PASSED               [ 72%]
tests/test_d3d_bsp.py::test_entites_loaded[d3dbsp3] PASSED               [ 73%]
tests/test_idtech_bsp.py::test_no_errors[bsp0] PASSED                    [ 73%]
tests/test_idtech_bsp.py::test_entities_loaded[bsp0] PASSED              [ 74%]
tests/test_idtech_bsp.py::test_face_struct[bsp0] PASSED                  [ 75%]
tests/test_valve_bsp.py::test_no_errors[bsp0] PASSED                     [ 75%]
tests/test_valve_bsp.py::test_no_errors[bsp1] PASSED                     [ 76%]
tests/test_valve_bsp.py::test_no_errors[bsp2] PASSED                     [ 76%]
tests/test_valve_bsp.py::test_entities_loaded[bsp0] PASSED               [ 77%]
tests/test_valve_bsp.py::test_entities_loaded[bsp1] PASSED               [ 77%]
tests/test_valve_bsp.py::test_entities_loaded[bsp2] PASSED               [ 78%]
tests/branches/test_base.py::TestStruct::test_unpack PASSED              [ 78%]
tests/branches/test_base.py::TestStruct::test_pack PASSED                [ 79%]
tests/branches/test_base.py::TestMappedArray::test_init PASSED           [ 80%]
tests/branches/test_branch_scripts.py::test_basic_branch_script[bsp_tool.branches.id_software.quake] PASSED [ 80%]
tests/branches/test_branch_scripts.py::test_basic_branch_script[bsp_tool.branches.id_software.quake2] PASSED [ 81%]
tests/branches/test_branch_scripts.py::test_basic_branch_script[bsp_tool.branches.id_software.quake3] PASSED [ 81%]
tests/branches/test_branch_scripts.py::test_basic_branch_script[bsp_tool.branches.infinity_ward.call_of_duty1] PASSED [ 82%]
tests/branches/test_branch_scripts.py::test_basic_branch_script[bsp_tool.branches.infinity_ward.call_of_duty2] PASSED [ 82%]
tests/branches/test_branch_scripts.py::test_basic_branch_script[bsp_tool.branches.infinity_ward.modern_warfare] PASSED [ 83%]
tests/branches/test_branch_scripts.py::test_basic_branch_script[bsp_tool.branches.ion_storm.daikatana] PASSED [ 84%]
tests/branches/test_branch_scripts.py::test_basic_branch_script[bsp_tool.branches.gearbox.blue_shift] PASSED [ 84%]
tests/branches/test_branch_scripts.py::test_basic_branch_script[bsp_tool.branches.gearbox.nightfire] PASSED [ 85%]
tests/branches/test_branch_scripts.py::test_basic_branch_script[bsp_tool.branches.raven.hexen2] PASSED [ 85%]
tests/branches/test_branch_scripts.py::test_basic_branch_script[bsp_tool.branches.raven.soldier_of_fortune] PASSED [ 86%]
tests/branches/test_branch_scripts.py::test_basic_branch_script[bsp_tool.branches.raven.soldier_of_fortune2] PASSED [ 86%]
tests/branches/test_branch_scripts.py::test_basic_branch_script[bsp_tool.branches.ritual.fakk2] PASSED [ 87%]
tests/branches/test_branch_scripts.py::test_basic_branch_script[bsp_tool.branches.ritual.moh_allied_assault] PASSED [ 88%]
tests/branches/test_branch_scripts.py::test_basic_branch_script[bsp_tool.branches.ritual.sin] PASSED [ 88%]
tests/branches/test_branch_scripts.py::test_basic_branch_script[bsp_tool.branches.ritual.star_trek_elite_force2] PASSED [ 89%]
tests/branches/test_branch_scripts.py::test_basic_branch_script[bsp_tool.branches.valve.goldsrc] PASSED [ 89%]
tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.arkane.dark_messiah_multiplayer] PASSED [ 90%]
tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.arkane.dark_messiah_singleplayer] PASSED [ 90%]
tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.nexon.cso2] PASSED [ 91%]
tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.nexon.cso2_2018] PASSED [ 92%]
tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.nexon.vindictus] PASSED [ 92%]
tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.respawn.apex_legends] PASSED [ 93%]
tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.respawn.titanfall] PASSED [ 93%]
tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.respawn.titanfall_x360] PASSED [ 94%]
tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.respawn.titanfall2] PASSED [ 94%]
tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.troika.vampire] PASSED [ 95%]
tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.valve.alien_swarm] PASSED [ 96%]
tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.valve.left4dead] PASSED [ 96%]
tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.valve.left4dead2] PASSED [ 97%]
tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.valve.orange_box] PASSED [ 97%]
tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.valve.orange_box_x360] PASSED [ 98%]
tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.valve.sdk_2013] PASSED [ 98%]
tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.valve.sdk_2013_x360] PASSED [ 99%]
tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.valve.source] PASSED [100%]

================================== FAILURES ===================================
______________ test_load_bsp[E:/Mod-Quake/rerelease-map_dirs73] _______________

group_path = 'E:/Mod', game_name = 'Quake/rerelease'
map_dirs = ['id1/pak0/maps', 'id1/pak0/maps/test', 'dopa/pak0/maps', 'hipnotic/pak0/maps', 'mg1/pak0/maps', 'rogue/pak0/maps']

    @pytest.mark.parametrize("group_path,game_name,map_dirs", [(*gps, ms) for gps, ms in maplist.installed_games.items()])
    def test_load_bsp(group_path, game_name, map_dirs):
        """MEGATEST: 69GB+ of .bsp files!"""
        branch_script = game_scripts.get(game_name)
        # NOTE: this is ugly and results in quite a few errors
        # auto-detection really shouldn't have to rely on precise strings
        errors = dict()
        # ^ {"game": ["errors"]}
        types = set()
        # ^ {(BspClass, branch, version)}
        total = 0
        for map_dir in map_dirs:
            full_path = os.path.join(group_path, game_name, map_dir)
            if os.path.exists(full_path):
                files = os.listdir(full_path)
                maps = fnmatch.filter(files, "*[Bb][Ss][Pp]")  # .bsp, .BSP & CoD2 .d3dbsp
                total += len(maps)
                assert len(maps) != 0, f"couldn't find any maps for {game_name} in {map_dir}"
                for m in maps:  # load every .bsp
                    try:
                        bsp_filename = os.path.join(full_path, m)
                        if os.path.getsize(bsp_filename) == 0:
                            continue  # hl2/maps/d2_coast_02 is 0 bytes, idk why it shipped
                        if game_name == "half-life 2/episodic" and m == "ep1_citadel_00_demo.bsp":
                            continue  # broken HL2:EP1 map (game crashes on load)
                        elif game_name == "half-life 2/hl1" and m in ("c4a1y.bsp", "c4a1z.bsp"):
                            continue  # broken HL:Source maps (y is v18 and won't run, z is v19 and has broken IO)
>                       bsp = load_bsp(bsp_filename, branch_script)

tests\test_bsp.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

filename = 'E:/Mod\\Quake/rerelease\\dopa/pak0/maps\\e5dm.bsp'
branch_script = None

    def load_bsp(filename: str, branch_script: ModuleType = None) -> base.Bsp:
        """Calculate and return the correct base.Bsp sub-class for the given .bsp"""
        # TODO: OPTION: use filepath to guess game / branch
        # verify path
        if not os.path.exists(filename):
            raise FileNotFoundError(f".bsp file '{filename}' does not exist.")
        elif os.path.getsize(filename) == 0:  # HL2/ d2_coast_02.bsp
            raise RuntimeError(f"{filename} is an empty file")
        # parse header
        with open(filename, "rb") as bsp_file:
            file_magic = bsp_file.read(4)
            if file_magic in (b"PSBr", b"PSBV"):
                version = int.from_bytes(bsp_file.read(4), "big")
            else:
                version = int.from_bytes(bsp_file.read(4), "little")
            if version > 0xFFFF:
                version = (version & 0xFFFF, version >> 16)  # major, minor
        # identify BspVariant
        if filename.lower().endswith(".d3dbsp"):  # CoD2 & CoD4
            assert file_magic == b"IBSP", "Mystery .d3dbsp!"
            assert version in InfinityWard_versions, "Unexpected .d3dbsp format version!"
            if version >= branches.infinity_ward.modern_warfare.BSP_VERSION:
                BspVariant = D3DBsp
            else:
                BspVariant = InfinityWardBsp
        elif filename.lower().endswith(".bsp"):
            if file_magic not in BspVariant_from_file_magic:  # Quake / GoldSrc
                version = int.from_bytes(file_magic, "little")
                if version in Quake_versions:
                    BspVariant = QuakeBsp
                    file_magic = None
                elif version in GoldSrc_versions:
                    BspVariant = GoldSrcBsp
                    file_magic = None
                elif file_magic == b"BSP2":
>                   raise NotImplementedError("BSP2 format is not yet supported")
E                   NotImplementedError: BSP2 format is not yet supported

bsp_tool\__init__.py:79: NotImplementedError
__________________ test_load_bsp[E:/Mod-Alkaline-map_dirs74] __________________

group_path = 'E:/Mod', game_name = 'Alkaline'
map_dirs = ['alkaline/pak0/maps', 'alk1.1/pak0/maps', 'alkaline_dk/maps']

    @pytest.mark.parametrize("group_path,game_name,map_dirs", [(*gps, ms) for gps, ms in maplist.installed_games.items()])
    def test_load_bsp(group_path, game_name, map_dirs):
        """MEGATEST: 69GB+ of .bsp files!"""
        branch_script = game_scripts.get(game_name)
        # NOTE: this is ugly and results in quite a few errors
        # auto-detection really shouldn't have to rely on precise strings
        errors = dict()
        # ^ {"game": ["errors"]}
        types = set()
        # ^ {(BspClass, branch, version)}
        total = 0
        for map_dir in map_dirs:
            full_path = os.path.join(group_path, game_name, map_dir)
            if os.path.exists(full_path):
                files = os.listdir(full_path)
                maps = fnmatch.filter(files, "*[Bb][Ss][Pp]")  # .bsp, .BSP & CoD2 .d3dbsp
                total += len(maps)
                assert len(maps) != 0, f"couldn't find any maps for {game_name} in {map_dir}"
                for m in maps:  # load every .bsp
                    try:
                        bsp_filename = os.path.join(full_path, m)
                        if os.path.getsize(bsp_filename) == 0:
                            continue  # hl2/maps/d2_coast_02 is 0 bytes, idk why it shipped
                        if game_name == "half-life 2/episodic" and m == "ep1_citadel_00_demo.bsp":
                            continue  # broken HL2:EP1 map (game crashes on load)
                        elif game_name == "half-life 2/hl1" and m in ("c4a1y.bsp", "c4a1z.bsp"):
                            continue  # broken HL:Source maps (y is v18 and won't run, z is v19 and has broken IO)
>                       bsp = load_bsp(bsp_filename, branch_script)

tests\test_bsp.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

filename = 'E:/Mod\\Alkaline\\alkaline/pak0/maps\\alk_corrupt.bsp'
branch_script = None

    def load_bsp(filename: str, branch_script: ModuleType = None) -> base.Bsp:
        """Calculate and return the correct base.Bsp sub-class for the given .bsp"""
        # TODO: OPTION: use filepath to guess game / branch
        # verify path
        if not os.path.exists(filename):
            raise FileNotFoundError(f".bsp file '{filename}' does not exist.")
        elif os.path.getsize(filename) == 0:  # HL2/ d2_coast_02.bsp
            raise RuntimeError(f"{filename} is an empty file")
        # parse header
        with open(filename, "rb") as bsp_file:
            file_magic = bsp_file.read(4)
            if file_magic in (b"PSBr", b"PSBV"):
                version = int.from_bytes(bsp_file.read(4), "big")
            else:
                version = int.from_bytes(bsp_file.read(4), "little")
            if version > 0xFFFF:
                version = (version & 0xFFFF, version >> 16)  # major, minor
        # identify BspVariant
        if filename.lower().endswith(".d3dbsp"):  # CoD2 & CoD4
            assert file_magic == b"IBSP", "Mystery .d3dbsp!"
            assert version in InfinityWard_versions, "Unexpected .d3dbsp format version!"
            if version >= branches.infinity_ward.modern_warfare.BSP_VERSION:
                BspVariant = D3DBsp
            else:
                BspVariant = InfinityWardBsp
        elif filename.lower().endswith(".bsp"):
            if file_magic not in BspVariant_from_file_magic:  # Quake / GoldSrc
                version = int.from_bytes(file_magic, "little")
                if version in Quake_versions:
                    BspVariant = QuakeBsp
                    file_magic = None
                elif version in GoldSrc_versions:
                    BspVariant = GoldSrcBsp
                    file_magic = None
                elif file_magic == b"BSP2":
>                   raise NotImplementedError("BSP2 format is not yet supported")
E                   NotImplementedError: BSP2 format is not yet supported

bsp_tool\__init__.py:79: NotImplementedError
___________________ test_load_bsp[E:/Mod-Warsow-map_dirs78] ___________________

group_path = 'E:/Mod', game_name = 'Warsow', map_dirs = ['maps']

    @pytest.mark.parametrize("group_path,game_name,map_dirs", [(*gps, ms) for gps, ms in maplist.installed_games.items()])
    def test_load_bsp(group_path, game_name, map_dirs):
        """MEGATEST: 69GB+ of .bsp files!"""
        branch_script = game_scripts.get(game_name)
        # NOTE: this is ugly and results in quite a few errors
        # auto-detection really shouldn't have to rely on precise strings
        errors = dict()
        # ^ {"game": ["errors"]}
        types = set()
        # ^ {(BspClass, branch, version)}
        total = 0
        for map_dir in map_dirs:
            full_path = os.path.join(group_path, game_name, map_dir)
            if os.path.exists(full_path):
                files = os.listdir(full_path)
                maps = fnmatch.filter(files, "*[Bb][Ss][Pp]")  # .bsp, .BSP & CoD2 .d3dbsp
                total += len(maps)
                assert len(maps) != 0, f"couldn't find any maps for {game_name} in {map_dir}"
                for m in maps:  # load every .bsp
                    try:
                        bsp_filename = os.path.join(full_path, m)
                        if os.path.getsize(bsp_filename) == 0:
                            continue  # hl2/maps/d2_coast_02 is 0 bytes, idk why it shipped
                        if game_name == "half-life 2/episodic" and m == "ep1_citadel_00_demo.bsp":
                            continue  # broken HL2:EP1 map (game crashes on load)
                        elif game_name == "half-life 2/hl1" and m in ("c4a1y.bsp", "c4a1z.bsp"):
                            continue  # broken HL:Source maps (y is v18 and won't run, z is v19 and has broken IO)
>                       bsp = load_bsp(bsp_filename, branch_script)

tests\test_bsp.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

filename = 'E:/Mod\\Warsow\\maps\\ui.bsp', branch_script = None

    def load_bsp(filename: str, branch_script: ModuleType = None) -> base.Bsp:
        """Calculate and return the correct base.Bsp sub-class for the given .bsp"""
        # TODO: OPTION: use filepath to guess game / branch
        # verify path
        if not os.path.exists(filename):
            raise FileNotFoundError(f".bsp file '{filename}' does not exist.")
        elif os.path.getsize(filename) == 0:  # HL2/ d2_coast_02.bsp
            raise RuntimeError(f"{filename} is an empty file")
        # parse header
        with open(filename, "rb") as bsp_file:
            file_magic = bsp_file.read(4)
            if file_magic in (b"PSBr", b"PSBV"):
                version = int.from_bytes(bsp_file.read(4), "big")
            else:
                version = int.from_bytes(bsp_file.read(4), "little")
            if version > 0xFFFF:
                version = (version & 0xFFFF, version >> 16)  # major, minor
        # identify BspVariant
        if filename.lower().endswith(".d3dbsp"):  # CoD2 & CoD4
            assert file_magic == b"IBSP", "Mystery .d3dbsp!"
            assert version in InfinityWard_versions, "Unexpected .d3dbsp format version!"
            if version >= branches.infinity_ward.modern_warfare.BSP_VERSION:
                BspVariant = D3DBsp
            else:
                BspVariant = InfinityWardBsp
        elif filename.lower().endswith(".bsp"):
            if file_magic not in BspVariant_from_file_magic:  # Quake / GoldSrc
                version = int.from_bytes(file_magic, "little")
                if version in Quake_versions:
                    BspVariant = QuakeBsp
                    file_magic = None
                elif version in GoldSrc_versions:
                    BspVariant = GoldSrcBsp
                    file_magic = None
                elif file_magic == b"BSP2":
                    raise NotImplementedError("BSP2 format is not yet supported")
                elif file_magic == b"FBSP":
>                   raise NotImplementedError("FBSP format is not yet supported")
E                   NotImplementedError: FBSP format is not yet supported

bsp_tool\__init__.py:81: NotImplementedError
____________________ test_load_bsp[E:/Mod-CSO2-map_dirs87] ____________________

group_path = 'E:/Mod', game_name = 'CSO2', map_dirs = ['maps']

    @pytest.mark.parametrize("group_path,game_name,map_dirs", [(*gps, ms) for gps, ms in maplist.installed_games.items()])
    def test_load_bsp(group_path, game_name, map_dirs):
        """MEGATEST: 69GB+ of .bsp files!"""
        branch_script = game_scripts.get(game_name)
        # NOTE: this is ugly and results in quite a few errors
        # auto-detection really shouldn't have to rely on precise strings
        errors = dict()
        # ^ {"game": ["errors"]}
        types = set()
        # ^ {(BspClass, branch, version)}
        total = 0
        for map_dir in map_dirs:
            full_path = os.path.join(group_path, game_name, map_dir)
            if os.path.exists(full_path):
                files = os.listdir(full_path)
                maps = fnmatch.filter(files, "*[Bb][Ss][Pp]")  # .bsp, .BSP & CoD2 .d3dbsp
                total += len(maps)
                assert len(maps) != 0, f"couldn't find any maps for {game_name} in {map_dir}"
                for m in maps:  # load every .bsp
                    try:
                        bsp_filename = os.path.join(full_path, m)
                        if os.path.getsize(bsp_filename) == 0:
                            continue  # hl2/maps/d2_coast_02 is 0 bytes, idk why it shipped
                        if game_name == "half-life 2/episodic" and m == "ep1_citadel_00_demo.bsp":
                            continue  # broken HL2:EP1 map (game crashes on load)
                        elif game_name == "half-life 2/hl1" and m in ("c4a1y.bsp", "c4a1z.bsp"):
                            continue  # broken HL:Source maps (y is v18 and won't run, z is v19 and has broken IO)
                        bsp = load_bsp(bsp_filename, branch_script)
                        bsp.file.close()  # avoid OSError "Too many open files"
                        # TODO: check external lumps (RespawnBsp only)
                        # -- mostly filesize checks
                        # -- SpecialLumps will have to be loaded and then add bsp.external.loading_errors
                        loading_errors = {**bsp.loading_errors}
                        if hasattr(bsp, "GAME_LUMP"):
                            if not isinstance(bsp.GAME_LUMP, lumps.RawBspLump):  # HACK: Vindictus GameLump not mapped
                                loading_errors.update(bsp.GAME_LUMP.loading_errors)
                        assert len(loading_errors) == 0, ", ".join(loading_errors.keys())
                    except AssertionError as ae:
                        errors[f"{map_dir}/{m}"] = ae
                        types.add((bsp.__class__.__name__, bsp.branch.__name__, bsp.bsp_version))
                        del bsp
>       assert errors == dict(), "\n".join([f"{len(errors)} out of {total} .bsps failed", *map(str, types)])
E       AssertionError: 97 out of 97 .bsps failed
E         ('ValveBsp', 'bsp_tool.branches.nexon.cso2', 100)
E       assert {'maps/aim_dust.bsp': AssertionError('TEXTURE_INFO, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/awp_metro.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/awp_museum.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/bigcity_main.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/bigcity_pvp.bsp': AssertionError('TEXTURE_INFO, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/campaign_05.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/cs_aquarium.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/cs_assault.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/cs_estate.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/cs_italy.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/cs_italy_night.bsp': AssertionError('FACES, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/cs_militia.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/cs_office.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/cs_office_xmas.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/de_aztec.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/de_cbble.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/de_centered.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/de_cornerwork.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/de_cornerwork2.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/de_dust.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP\nassert 2 == 0\n  +2\n  -0'),\n 'maps/de_dust2.bsp': AssertionError('GAME_LUMP, WORLD_LIGHTS_HDR\nassert 2 == 0\n  +2\n  -0'),\n 'maps/de_dust2_decompressed.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/de_headquarter.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/de_highland.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/de_inferno.bsp': AssertionError('GAME_LUMP, WORLD_LIGHTS_HDR\nassert 2 == 0\n  +2\n  -0'),\n 'maps/de_nuke.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/de_prodigy.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/de_sa02.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/de_sa03.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/de_storage.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/de_storm.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/de_survivor.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/de_tides.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/de_tosca.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/de_train.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/de_vantage.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/de_vertigo.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/dm_cargoship.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/dm_dustrush.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP\nassert 3 == 0\n  +3\n  -0'),\n 'maps/dm_killhouse.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/dm_mboss.bsp': AssertionError('TEXTURE_INFO, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/dm_playground.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/dm_sa01.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/dm_sewer.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/dm_shutdown.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/dm_uprising.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/duel_diner.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP\nassert 2 == 0\n  +2\n  -0'),\n 'maps/ew_lasttrain.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/gb_varena.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP\nassert 2 == 0\n  +2\n  -0'),\n 'maps/gm_giant.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/hm_multi01.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/hs2_assault.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/hs2_cargoship.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/hs2_estate.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/hs2_italy2.bsp': AssertionError('GAME_LUMP, WORLD_LIGHTS_HDR\nassert 2 == 0\n  +2\n  -0'),\n 'maps/hs2_italy2_xmas.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/hs2_office.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/hs2_phouse.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/hs2_sa01.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/hs2_sa02.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/hs2_sa03.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/hs2_studio.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/hs_aqua.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/hs_dust2.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/hs_festival.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/hs_highland.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP\nassert 3 == 0\n  +3\n  -0'),\n 'maps/hs_italy2.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/hs_italy2_xmas.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/hs_studio.bsp': AssertionError('GAME_LUMP, WORLD_LIGHTS_HDR\nassert 2 == 0\n  +2\n  -0'),\n 'maps/mad_city.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/mad_city_big.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/testzone_transition1.bsp': AssertionError('TEXTURE_INFO, FACES, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 5 == 0\n  +5\n  -0'),\n 'maps/testzone_transition2.bsp': AssertionError('TEXTURE_INFO, FACES, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 5 == 0\n  +5\n  -0'),\n 'maps/tuto_walk.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/uc_aztec.bsp': AssertionError('TEXTURE_INFO, FACES, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 5 == 0\n  +5\n  -0'),\n 'maps/uc_museum.bsp': AssertionError('WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/uc_shutdown.bsp': AssertionError('TEXTURE_INFO, FACES, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 5 == 0\n  +5\n  -0'),\n 'maps/zc_laboratory.bsp': AssertionError('TEXTURE_INFO, FACES, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 5 == 0\n  +5\n  -0'),\n 'maps/zc_trainyard.bsp': AssertionError('TEXTURE_INFO, FACES, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 5 == 0\n  +5\n  -0'),\n 'maps/zd_aztec.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/zd_boss.bsp': AssertionError('GAME_LUMP, WORLD_LIGHTS_HDR\nassert 2 == 0\n  +2\n  -0'),\n 'maps/zd_internal.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/zd_italy.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/zd_lasttrain.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/zd_nuke.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/zd_park.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/zd_trainyard.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/zp_assault.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/zp_aztec.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/zp_estate.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/zp_italy.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/zp_militia.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP\nassert 2 == 0\n  +2\n  -0'),\n 'maps/zp_storm.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),\n 'maps/zp_uprising.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/zz_festival.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),\n 'maps/zz_phouse.bsp': AssertionError('GAME_LUMP, WORLD_LIGHTS_HDR\nassert 2 == 0\n  +2\n  -0'),\n 'maps/zz_prodigy.bsp': AssertionError('GAME_LUMP, WORLD_LIGHTS_HDR\nassert 2 == 0\n  +2\n  -0')} == {}
E         Left contains 97 more items:
E         {'maps/aim_dust.bsp': AssertionError('TEXTURE_INFO, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/awp_metro.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/awp_museum.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/bigcity_main.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/bigcity_pvp.bsp': AssertionError('TEXTURE_INFO, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/campaign_05.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/cs_aquarium.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/cs_assault.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/cs_estate.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/cs_italy.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/cs_italy_night.bsp': AssertionError('FACES, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/cs_militia.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/cs_office.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/cs_office_xmas.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/de_aztec.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/de_cbble.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/de_centered.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/de_cornerwork.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/de_cornerwork2.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/de_dust.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP\nassert 2 == 0\n  +2\n  -0'),
E          'maps/de_dust2.bsp': AssertionError('GAME_LUMP, WORLD_LIGHTS_HDR\nassert 2 == 0\n  +2\n  -0'),
E          'maps/de_dust2_decompressed.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/de_headquarter.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/de_highland.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/de_inferno.bsp': AssertionError('GAME_LUMP, WORLD_LIGHTS_HDR\nassert 2 == 0\n  +2\n  -0'),
E          'maps/de_nuke.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/de_prodigy.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/de_sa02.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/de_sa03.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/de_storage.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/de_storm.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/de_survivor.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/de_tides.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/de_tosca.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/de_train.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/de_vantage.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/de_vertigo.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/dm_cargoship.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/dm_dustrush.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP\nassert 3 == 0\n  +3\n  -0'),
E          'maps/dm_killhouse.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/dm_mboss.bsp': AssertionError('TEXTURE_INFO, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/dm_playground.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/dm_sa01.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/dm_sewer.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/dm_shutdown.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/dm_uprising.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/duel_diner.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP\nassert 2 == 0\n  +2\n  -0'),
E          'maps/ew_lasttrain.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/gb_varena.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP\nassert 2 == 0\n  +2\n  -0'),
E          'maps/gm_giant.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/hm_multi01.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/hs2_assault.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/hs2_cargoship.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/hs2_estate.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/hs2_italy2.bsp': AssertionError('GAME_LUMP, WORLD_LIGHTS_HDR\nassert 2 == 0\n  +2\n  -0'),
E          'maps/hs2_italy2_xmas.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/hs2_office.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/hs2_phouse.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/hs2_sa01.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/hs2_sa02.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/hs2_sa03.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/hs2_studio.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/hs_aqua.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/hs_dust2.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/hs_festival.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/hs_highland.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP\nassert 3 == 0\n  +3\n  -0'),
E          'maps/hs_italy2.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/hs_italy2_xmas.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/hs_studio.bsp': AssertionError('GAME_LUMP, WORLD_LIGHTS_HDR\nassert 2 == 0\n  +2\n  -0'),
E          'maps/mad_city.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/mad_city_big.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/testzone_transition1.bsp': AssertionError('TEXTURE_INFO, FACES, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 5 == 0\n  +5\n  -0'),
E          'maps/testzone_transition2.bsp': AssertionError('TEXTURE_INFO, FACES, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 5 == 0\n  +5\n  -0'),
E          'maps/tuto_walk.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/uc_aztec.bsp': AssertionError('TEXTURE_INFO, FACES, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 5 == 0\n  +5\n  -0'),
E          'maps/uc_museum.bsp': AssertionError('WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/uc_shutdown.bsp': AssertionError('TEXTURE_INFO, FACES, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 5 == 0\n  +5\n  -0'),
E          'maps/zc_laboratory.bsp': AssertionError('TEXTURE_INFO, FACES, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 5 == 0\n  +5\n  -0'),
E          'maps/zc_trainyard.bsp': AssertionError('TEXTURE_INFO, FACES, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 5 == 0\n  +5\n  -0'),
E          'maps/zd_aztec.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/zd_boss.bsp': AssertionError('GAME_LUMP, WORLD_LIGHTS_HDR\nassert 2 == 0\n  +2\n  -0'),
E          'maps/zd_internal.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/zd_italy.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/zd_lasttrain.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/zd_nuke.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/zd_park.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/zd_trainyard.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/zp_assault.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/zp_aztec.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/zp_estate.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/zp_italy.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/zp_militia.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP\nassert 2 == 0\n  +2\n  -0'),
E          'maps/zp_storm.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E          'maps/zp_uprising.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/zz_festival.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E          'maps/zz_phouse.bsp': AssertionError('GAME_LUMP, WORLD_LIGHTS_HDR\nassert 2 == 0\n  +2\n  -0'),
E          'maps/zz_prodigy.bsp': AssertionError('GAME_LUMP, WORLD_LIGHTS_HDR\nassert 2 == 0\n  +2\n  -0')}
E         Full diff:
E           {
E         -  ,
E         +  'maps/aim_dust.bsp': AssertionError('TEXTURE_INFO, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/awp_metro.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/awp_museum.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/bigcity_main.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/bigcity_pvp.bsp': AssertionError('TEXTURE_INFO, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/campaign_05.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/cs_aquarium.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/cs_assault.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/cs_estate.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/cs_italy.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/cs_italy_night.bsp': AssertionError('FACES, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/cs_militia.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/cs_office.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/cs_office_xmas.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/de_aztec.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/de_cbble.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/de_centered.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/de_cornerwork.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/de_cornerwork2.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/de_dust.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP\nassert 2 == 0\n  +2\n  -0'),
E         +  'maps/de_dust2.bsp': AssertionError('GAME_LUMP, WORLD_LIGHTS_HDR\nassert 2 == 0\n  +2\n  -0'),
E         +  'maps/de_dust2_decompressed.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/de_headquarter.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/de_highland.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/de_inferno.bsp': AssertionError('GAME_LUMP, WORLD_LIGHTS_HDR\nassert 2 == 0\n  +2\n  -0'),
E         +  'maps/de_nuke.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/de_prodigy.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/de_sa02.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/de_sa03.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/de_storage.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/de_storm.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/de_survivor.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/de_tides.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/de_tosca.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/de_train.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/de_vantage.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/de_vertigo.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/dm_cargoship.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/dm_dustrush.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/dm_killhouse.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/dm_mboss.bsp': AssertionError('TEXTURE_INFO, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/dm_playground.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/dm_sa01.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/dm_sewer.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/dm_shutdown.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/dm_uprising.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/duel_diner.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP\nassert 2 == 0\n  +2\n  -0'),
E         +  'maps/ew_lasttrain.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/gb_varena.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP\nassert 2 == 0\n  +2\n  -0'),
E         +  'maps/gm_giant.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/hm_multi01.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/hs2_assault.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/hs2_cargoship.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/hs2_estate.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/hs2_italy2.bsp': AssertionError('GAME_LUMP, WORLD_LIGHTS_HDR\nassert 2 == 0\n  +2\n  -0'),
E         +  'maps/hs2_italy2_xmas.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/hs2_office.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/hs2_phouse.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/hs2_sa01.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/hs2_sa02.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/hs2_sa03.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/hs2_studio.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/hs_aqua.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/hs_dust2.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/hs_festival.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/hs_highland.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/hs_italy2.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/hs_italy2_xmas.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/hs_studio.bsp': AssertionError('GAME_LUMP, WORLD_LIGHTS_HDR\nassert 2 == 0\n  +2\n  -0'),
E         +  'maps/mad_city.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/mad_city_big.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/testzone_transition1.bsp': AssertionError('TEXTURE_INFO, FACES, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 5 == 0\n  +5\n  -0'),
E         +  'maps/testzone_transition2.bsp': AssertionError('TEXTURE_INFO, FACES, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 5 == 0\n  +5\n  -0'),
E         +  'maps/tuto_walk.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/uc_aztec.bsp': AssertionError('TEXTURE_INFO, FACES, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 5 == 0\n  +5\n  -0'),
E         +  'maps/uc_museum.bsp': AssertionError('WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/uc_shutdown.bsp': AssertionError('TEXTURE_INFO, FACES, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 5 == 0\n  +5\n  -0'),
E         +  'maps/zc_laboratory.bsp': AssertionError('TEXTURE_INFO, FACES, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 5 == 0\n  +5\n  -0'),
E         +  'maps/zc_trainyard.bsp': AssertionError('TEXTURE_INFO, FACES, WORLD_LIGHTS, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 5 == 0\n  +5\n  -0'),
E         +  'maps/zd_aztec.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/zd_boss.bsp': AssertionError('GAME_LUMP, WORLD_LIGHTS_HDR\nassert 2 == 0\n  +2\n  -0'),
E         +  'maps/zd_internal.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/zd_italy.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/zd_lasttrain.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/zd_nuke.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/zd_park.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/zd_trainyard.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/zp_assault.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/zp_aztec.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/zp_estate.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/zp_italy.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/zp_militia.bsp': AssertionError('TEXTURE_INFO, GAME_LUMP\nassert 2 == 0\n  +2\n  -0'),
E         +  'maps/zp_storm.bsp': AssertionError('TEXTURE_INFO, FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 4 == 0\n  +4\n  -0'),
E         +  'maps/zp_uprising.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/zz_festival.bsp': AssertionError('FACES, GAME_LUMP, WORLD_LIGHTS_HDR\nassert 3 == 0\n  +3\n  -0'),
E         +  'maps/zz_phouse.bsp': AssertionError('GAME_LUMP, WORLD_LIGHTS_HDR\nassert 2 == 0\n  +2\n  -0'),
E         +  'maps/zz_prodigy.bsp': AssertionError('GAME_LUMP, WORLD_LIGHTS_HDR\nassert 2 == 0\n  +2\n  -0'),
E           }

tests\test_bsp.py:77: AssertionError
__________ test_load_bsp[E:/Mod-DarkMessiah/singleplayer-map_dirs88] __________

group_path = 'E:/Mod', game_name = 'DarkMessiah/singleplayer'
map_dirs = ['maps']

    @pytest.mark.parametrize("group_path,game_name,map_dirs", [(*gps, ms) for gps, ms in maplist.installed_games.items()])
    def test_load_bsp(group_path, game_name, map_dirs):
        """MEGATEST: 69GB+ of .bsp files!"""
        branch_script = game_scripts.get(game_name)
        # NOTE: this is ugly and results in quite a few errors
        # auto-detection really shouldn't have to rely on precise strings
        errors = dict()
        # ^ {"game": ["errors"]}
        types = set()
        # ^ {(BspClass, branch, version)}
        total = 0
        for map_dir in map_dirs:
            full_path = os.path.join(group_path, game_name, map_dir)
            if os.path.exists(full_path):
                files = os.listdir(full_path)
                maps = fnmatch.filter(files, "*[Bb][Ss][Pp]")  # .bsp, .BSP & CoD2 .d3dbsp
                total += len(maps)
                assert len(maps) != 0, f"couldn't find any maps for {game_name} in {map_dir}"
                for m in maps:  # load every .bsp
                    try:
                        bsp_filename = os.path.join(full_path, m)
                        if os.path.getsize(bsp_filename) == 0:
                            continue  # hl2/maps/d2_coast_02 is 0 bytes, idk why it shipped
                        if game_name == "half-life 2/episodic" and m == "ep1_citadel_00_demo.bsp":
                            continue  # broken HL2:EP1 map (game crashes on load)
                        elif game_name == "half-life 2/hl1" and m in ("c4a1y.bsp", "c4a1z.bsp"):
                            continue  # broken HL:Source maps (y is v18 and won't run, z is v19 and has broken IO)
                        bsp = load_bsp(bsp_filename, branch_script)
                        bsp.file.close()  # avoid OSError "Too many open files"
                        # TODO: check external lumps (RespawnBsp only)
                        # -- mostly filesize checks
                        # -- SpecialLumps will have to be loaded and then add bsp.external.loading_errors
                        loading_errors = {**bsp.loading_errors}
                        if hasattr(bsp, "GAME_LUMP"):
                            if not isinstance(bsp.GAME_LUMP, lumps.RawBspLump):  # HACK: Vindictus GameLump not mapped
                                loading_errors.update(bsp.GAME_LUMP.loading_errors)
                        assert len(loading_errors) == 0, ", ".join(loading_errors.keys())
                    except AssertionError as ae:
                        errors[f"{map_dir}/{m}"] = ae
                        types.add((bsp.__class__.__name__, bsp.branch.__name__, bsp.bsp_version))
                        del bsp
>       assert errors == dict(), "\n".join([f"{len(errors)} out of {total} .bsps failed", *map(str, types)])
E       AssertionError: 35 out of 35 .bsps failed
E         ('ValveBsp', 'bsp_tool.branches.arkane.dark_messiah_singleplayer', (20, 4))
E       assert {'maps/e3_l06_l09.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l00.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l01_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l02_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l02_b1.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l02_b2.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l03_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l03_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l04_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l05_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l05_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l05_c.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l06_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l06_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l06_c.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l06_d.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l07_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l07_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l08_a1.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l08_a2.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l08_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l09_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l09_d.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l10_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l10_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l10_c.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l11_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l11_b1.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l11_b2.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l11_c.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l12_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l12_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/l12_c.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/menu_3d.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),\n 'maps/menu_3d_credits.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0')} == {}
E         Left contains 35 more items:
E         {'maps/e3_l06_l09.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l00.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l01_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l02_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l02_b1.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l02_b2.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l03_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l03_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l04_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l05_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l05_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l05_c.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l06_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l06_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l06_c.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l06_d.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l07_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l07_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l08_a1.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l08_a2.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l08_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l09_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l09_d.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l10_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l10_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l10_c.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l11_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l11_b1.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l11_b2.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l11_c.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l12_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l12_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/l12_c.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/menu_3d.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E          'maps/menu_3d_credits.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0')}
E         Full diff:
E           {
E         -  ,
E         +  'maps/e3_l06_l09.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l00.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l01_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l02_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l02_b1.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l02_b2.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l03_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l03_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l04_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l05_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l05_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l05_c.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l06_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l06_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l06_c.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l06_d.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l07_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l07_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l08_a1.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l08_a2.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l08_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l09_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l09_d.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l10_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l10_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l10_c.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l11_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l11_b1.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l11_b2.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l11_c.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l12_a.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l12_b.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/l12_c.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/menu_3d.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/menu_3d_credits.bsp': AssertionError('GAME_LUMP\nassert 1 == 0\n  +1\n  -0'),
E           }

tests\test_bsp.py:77: AssertionError
_________________ test_load_bsp[E:/Mod-Vindictus-map_dirs95] __________________

group_path = 'E:/Mod', game_name = 'Vindictus', map_dirs = ['maps']

    @pytest.mark.parametrize("group_path,game_name,map_dirs", [(*gps, ms) for gps, ms in maplist.installed_games.items()])
    def test_load_bsp(group_path, game_name, map_dirs):
        """MEGATEST: 69GB+ of .bsp files!"""
        branch_script = game_scripts.get(game_name)
        # NOTE: this is ugly and results in quite a few errors
        # auto-detection really shouldn't have to rely on precise strings
        errors = dict()
        # ^ {"game": ["errors"]}
        types = set()
        # ^ {(BspClass, branch, version)}
        total = 0
        for map_dir in map_dirs:
            full_path = os.path.join(group_path, game_name, map_dir)
            if os.path.exists(full_path):
                files = os.listdir(full_path)
                maps = fnmatch.filter(files, "*[Bb][Ss][Pp]")  # .bsp, .BSP & CoD2 .d3dbsp
                total += len(maps)
                assert len(maps) != 0, f"couldn't find any maps for {game_name} in {map_dir}"
                for m in maps:  # load every .bsp
                    try:
                        bsp_filename = os.path.join(full_path, m)
                        if os.path.getsize(bsp_filename) == 0:
                            continue  # hl2/maps/d2_coast_02 is 0 bytes, idk why it shipped
                        if game_name == "half-life 2/episodic" and m == "ep1_citadel_00_demo.bsp":
                            continue  # broken HL2:EP1 map (game crashes on load)
                        elif game_name == "half-life 2/hl1" and m in ("c4a1y.bsp", "c4a1z.bsp"):
                            continue  # broken HL:Source maps (y is v18 and won't run, z is v19 and has broken IO)
                        bsp = load_bsp(bsp_filename, branch_script)
                        bsp.file.close()  # avoid OSError "Too many open files"
                        # TODO: check external lumps (RespawnBsp only)
                        # -- mostly filesize checks
                        # -- SpecialLumps will have to be loaded and then add bsp.external.loading_errors
                        loading_errors = {**bsp.loading_errors}
                        if hasattr(bsp, "GAME_LUMP"):
                            if not isinstance(bsp.GAME_LUMP, lumps.RawBspLump):  # HACK: Vindictus GameLump not mapped
                                loading_errors.update(bsp.GAME_LUMP.loading_errors)
                        assert len(loading_errors) == 0, ", ".join(loading_errors.keys())
                    except AssertionError as ae:
                        errors[f"{map_dir}/{m}"] = ae
                        types.add((bsp.__class__.__name__, bsp.branch.__name__, bsp.bsp_version))
                        del bsp
>       assert errors == dict(), "\n".join([f"{len(errors)} out of {total} .bsps failed", *map(str, types)])
E       AssertionError: 316 out of 474 .bsps failed
E         ('ValveBsp', 'bsp_tool.branches.nexon.vindictus', 20)
E       assert {'maps/01_boss_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/01_event.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/01_mboss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/01_mboss_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/01c_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/01e_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/01f_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/01g_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/01j.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/02_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/02_mboss_cut.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/02a.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/02b.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/02c.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/02d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/02e.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/02f.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/02h.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/02i.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/02j.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/02k.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/03_mboss_alice.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/03c.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/03d.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/03e.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/03f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/03j.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/04_boss.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/04_mboss.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/04a.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/04d.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/04f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/05a.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/05b.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/05c.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/05d.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/05e.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/05f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/05g.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/05h.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/05i.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/05k.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/05l.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/06_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/06c.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/06d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/06e.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/06f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/06g.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/06h.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/06i.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/06j.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/06k.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/07_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/07_mboss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/07a.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/07a_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/07b.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/07b_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/07c.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/07c_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/07d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/07d_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/07e.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/07e_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/07f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/07f_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/07g.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/07g_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/07h.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/07i.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/07i_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/07j_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/08_mboss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/08d.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/08e.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/08f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/08g.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/08g_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/08h.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/09_boss_special.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/09_mboss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/09a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/09b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/09b_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/09d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/10_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/10a.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/10b.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/11a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/11c.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/11c_special.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/11d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/12a.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/12a_ds.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/12b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/12b_ds.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/12c.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/12c_ds.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/13_mboss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/13_mboss_farming.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/13_mboss_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/13a_farming.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/13a_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/13b_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/13d_farming.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/13d_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/13f_farming.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/13f_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/13g.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/13g_farming.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/13g_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/13h_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/14_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/14_boss_return.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/14_mboss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/14_mboss_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/14a_guild.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/14a_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/14b_guild.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/14b_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/14c_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/14d_guild.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/14d_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/14e_guild.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/14e_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/14f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/14f_guild.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/14f_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/14g.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/14g_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/15_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/15a_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/15b_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/15b_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/15c_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/15c_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/15d_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/15d_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/15e_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/15f_new_dusk.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/15g_new_dusk.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/15i_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/15i_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/15j_new_dusk.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/15j_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/15k_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/15k_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/15m.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/15n.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16_boss_a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16_boss_b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16a_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16a_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16b_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16c_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16c_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16d_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16d_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16e_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16e_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16f_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16f_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16f_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16g_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16g_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16h_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16i_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16i_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16j_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16j_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16k_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16k_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16l_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16l_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16m_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16m_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16n_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16n_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/16p.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/17a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/17b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_02.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_03.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_04.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_05_story.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_06.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_07.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_08.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_09.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_10.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_12.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_13.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_14.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_14_ex.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_15.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_16.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_18.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_19.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_19_ex.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_20a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_20b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_20c.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_20d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_20e.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_20f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_20g.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_20h.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_20k.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_21.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_22a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_22b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_22c.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_22c_return.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_22d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_22d_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_22f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_22h.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_22h_mboss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_23.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_25.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_25_ending.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_25_screenshot.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_26a_1.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_26b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_26c.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_26d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_26e.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_26f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_26g_04.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_26h.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_26i.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_26j.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_26k.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_26l.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_26l_ds.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_26l_ending.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_27b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_29.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_31.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/3_game_start.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/Storysector_talk.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/background01.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/bel_teaser.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/bel_teaser_light.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/create_character.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/event_halloween_a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/event_halloween_b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/event_halloween_dream.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/event_newyear_2014.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/event_newyear_2015.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/event_xmas14_b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/event_xmas_a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/event_xmas_b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/f01_cart.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/f01_cart_ex.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/f01_start.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/game_create_character.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/game_create_character_arisha.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/game_create_character_hagie.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/game_create_character_lynn.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/game_create_character_vin.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/game_create_character_vin_arisha.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/game_create_character_vin_hagie.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/game_create_character_vin_lynn.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/game_start.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/game_start_neamhain_kalok.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/game_start_vin.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/h01.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/h03.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/h03_cut.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/lobby_event.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/lobby_fishingcraft.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/lobby_fishingcraft_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/lobby_fishingcraft_sunset.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/lobby_fishingcraft_winter.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/lobby_multiplayer.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/lobby_multiplayer_berbe.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/lobby_multiplayer_berbe_hall.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/lobby_multiplayer_guild.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/lobby_multiplayer_morvan.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/lobby_multiplayer_morvan_s.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/lobby_multiplayer_rochest.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/lobby_multiplayer_rochest_s.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/lobby_multiplayer_spring.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/minigame.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/minigame_wall.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/nolwenn.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/p02.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/p03.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/p04.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/p05.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/p06.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/p06_blacklight.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/p07.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/p_halloween.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),\n 'maps/pve_competition.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/s3_00.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/s3_game_start.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/s3_lobby_multiplayer.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/s3_lobby_multiplayer_rochest.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/s3_lobby_multiplayer_rochest_w.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/s3_lobby_multiplayer_winter.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/sc_mini01.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/sc_mini02.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/sc_mini03.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/start_2018_children_089b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/start_2018_foolsday_089b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/start_2018_spring_089b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/start_2018_summer_089b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/start_2020_lethor.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/t05_school.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/teaser_lethor.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/w_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),\n 'maps/w_boss02.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0')} == {}
E         Left contains 316 more items:
E         {'maps/01_boss_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/01_event.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/01_mboss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/01_mboss_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/01c_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/01e_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/01f_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/01g_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/01j.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/02_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/02_mboss_cut.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/02a.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/02b.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/02c.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/02d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/02e.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/02f.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/02h.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/02i.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/02j.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/02k.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/03_mboss_alice.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/03c.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/03d.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/03e.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/03f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/03j.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/04_boss.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/04_mboss.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/04a.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/04d.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/04f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/05a.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/05b.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/05c.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/05d.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/05e.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/05f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/05g.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/05h.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/05i.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/05k.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/05l.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/06_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/06c.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/06d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/06e.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/06f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/06g.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/06h.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/06i.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/06j.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/06k.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/07_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/07_mboss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/07a.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/07a_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/07b.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/07b_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/07c.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/07c_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/07d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/07d_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/07e.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/07e_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/07f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/07f_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/07g.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/07g_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/07h.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/07i.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/07i_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/07j_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/08_mboss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/08d.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/08e.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/08f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/08g.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/08g_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/08h.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/09_boss_special.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/09_mboss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/09a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/09b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/09b_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/09d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/10_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/10a.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/10b.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/11a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/11c.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/11c_special.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/11d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/12a.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/12a_ds.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/12b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/12b_ds.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/12c.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/12c_ds.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/13_mboss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/13_mboss_farming.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/13_mboss_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/13a_farming.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/13a_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/13b_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/13d_farming.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/13d_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/13f_farming.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/13f_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/13g.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/13g_farming.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/13g_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/13h_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/14_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/14_boss_return.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/14_mboss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/14_mboss_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/14a_guild.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/14a_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/14b_guild.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/14b_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/14c_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/14d_guild.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/14d_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/14e_guild.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/14e_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/14f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/14f_guild.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/14f_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/14g.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/14g_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/15_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/15a_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/15b_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/15b_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/15c_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/15c_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/15d_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/15d_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/15e_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/15f_new_dusk.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/15g_new_dusk.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/15i_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/15i_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/15j_new_dusk.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/15j_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/15k_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/15k_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/15m.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/15n.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16_boss_a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16_boss_b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16a_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16a_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16b_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16c_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16c_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16d_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16d_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16e_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16e_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16f_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16f_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16f_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16g_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16g_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16h_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16i_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16i_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16j_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16j_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16k_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16k_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16l_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16l_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16m_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16m_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16n_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16n_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/16p.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/17a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/17b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_02.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_03.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_04.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_05_story.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_06.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_07.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_08.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_09.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_10.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_12.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_13.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_14.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_14_ex.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_15.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_16.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_18.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_19.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_19_ex.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_20a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_20b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_20c.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_20d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_20e.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_20f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_20g.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_20h.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_20k.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_21.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_22a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_22b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_22c.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_22c_return.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_22d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_22d_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_22f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_22h.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_22h_mboss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_23.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_25.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_25_ending.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_25_screenshot.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_26a_1.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_26b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_26c.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_26d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_26e.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_26f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_26g_04.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_26h.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_26i.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_26j.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_26k.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_26l.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_26l_ds.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_26l_ending.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_27b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_29.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_31.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/3_game_start.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/Storysector_talk.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/background01.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/bel_teaser.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/bel_teaser_light.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/create_character.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/event_halloween_a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/event_halloween_b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/event_halloween_dream.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/event_newyear_2014.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/event_newyear_2015.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/event_xmas14_b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/event_xmas_a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/event_xmas_b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/f01_cart.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/f01_cart_ex.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/f01_start.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/game_create_character.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/game_create_character_arisha.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/game_create_character_hagie.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/game_create_character_lynn.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/game_create_character_vin.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/game_create_character_vin_arisha.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/game_create_character_vin_hagie.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/game_create_character_vin_lynn.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/game_start.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/game_start_neamhain_kalok.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/game_start_vin.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/h01.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/h03.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/h03_cut.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/lobby_event.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/lobby_fishingcraft.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/lobby_fishingcraft_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/lobby_fishingcraft_sunset.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/lobby_fishingcraft_winter.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/lobby_multiplayer.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/lobby_multiplayer_berbe.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/lobby_multiplayer_berbe_hall.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/lobby_multiplayer_guild.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/lobby_multiplayer_morvan.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/lobby_multiplayer_morvan_s.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/lobby_multiplayer_rochest.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/lobby_multiplayer_rochest_s.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/lobby_multiplayer_spring.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/minigame.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/minigame_wall.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/nolwenn.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/p02.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/p03.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/p04.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/p05.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/p06.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/p06_blacklight.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/p07.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/p_halloween.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E          'maps/pve_competition.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/s3_00.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/s3_game_start.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/s3_lobby_multiplayer.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/s3_lobby_multiplayer_rochest.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/s3_lobby_multiplayer_rochest_w.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/s3_lobby_multiplayer_winter.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/sc_mini01.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/sc_mini02.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/sc_mini03.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/start_2018_children_089b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/start_2018_foolsday_089b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/start_2018_spring_089b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/start_2018_summer_089b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/start_2020_lethor.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/t05_school.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/teaser_lethor.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/w_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E          'maps/w_boss02.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0')}
E         Full diff:
E           {
E         -  ,
E         +  'maps/01_boss_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/01_event.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/01_mboss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/01_mboss_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/01c_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/01e_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/01f_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/01g_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/01j.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/02_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/02_mboss_cut.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/02a.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/02b.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/02c.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/02d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/02e.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/02f.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/02h.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/02i.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/02j.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/02k.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/03_mboss_alice.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/03c.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/03d.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/03e.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/03f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/03j.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/04_boss.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/04_mboss.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/04a.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/04d.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/04f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/05a.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/05b.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/05c.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/05d.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/05e.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/05f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/05g.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/05h.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/05i.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/05k.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/05l.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/06_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/06c.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/06d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/06e.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/06f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/06g.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/06h.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/06i.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/06j.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/06k.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/07_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/07_mboss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/07a.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/07a_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/07b.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/07b_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/07c.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/07c_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/07d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/07d_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/07e.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/07e_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/07f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/07f_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/07g.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/07g_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/07h.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/07i.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/07i_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/07j_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/08_mboss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/08d.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/08e.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/08f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/08g.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/08g_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/08h.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/09_boss_special.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/09_mboss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/09a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/09b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/09b_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/09d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/10_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/10a.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/10b.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/11a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/11c.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/11c_special.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/11d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/12a.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/12a_ds.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/12b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/12b_ds.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/12c.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/12c_ds.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/13_mboss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/13_mboss_farming.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/13_mboss_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/13a_farming.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/13a_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/13b_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/13d_farming.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/13d_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/13f_farming.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/13f_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/13g.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/13g_farming.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/13g_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/13h_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/14_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/14_boss_return.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/14_mboss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/14_mboss_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/14a_guild.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/14a_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/14b_guild.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/14b_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/14c_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/14d_guild.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/14d_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/14e_guild.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/14e_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/14f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/14f_guild.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/14f_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/14g.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/14g_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/15_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/15a_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/15b_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/15b_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/15c_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/15c_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/15d_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/15d_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/15e_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/15f_new_dusk.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/15g_new_dusk.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/15i_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/15i_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/15j_new_dusk.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/15j_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/15k_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/15k_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/15m.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/15n.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16_boss_a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16_boss_b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16a_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16a_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16b_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16c_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16c_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16d_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16d_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16e_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16e_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16f_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16f_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16f_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16g_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16g_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16h_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16i_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16i_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16j_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16j_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16k_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16k_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16l_new_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16l_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16m_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16m_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16n_new.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16n_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/16p.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/17a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/17b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_02.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_03.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_04.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_05_story.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_06.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_07.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_08.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_09.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_10.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_12.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_13.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_14.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_14_ex.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_15.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_16.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_18.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_19.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_19_ex.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_20a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_20b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_20c.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_20d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_20e.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_20f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_20g.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_20h.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_20k.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_21.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_22a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_22b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_22c.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_22c_return.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_22d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_22d_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_22f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_22h.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_22h_mboss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_23.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_25.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_25_ending.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_25_screenshot.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_26a_1.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_26b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_26c.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_26d.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_26e.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_26f.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_26g_04.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_26h.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_26i.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_26j.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_26k.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_26l.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_26l_ds.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_26l_ending.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_27b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_29.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_31.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/3_game_start.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/Storysector_talk.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/background01.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/bel_teaser.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/bel_teaser_light.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/create_character.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/event_halloween_a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/event_halloween_b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/event_halloween_dream.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/event_newyear_2014.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/event_newyear_2015.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/event_xmas14_b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/event_xmas_a.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/event_xmas_b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/f01_cart.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/f01_cart_ex.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/f01_start.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/game_create_character.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/game_create_character_arisha.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/game_create_character_hagie.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/game_create_character_lynn.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/game_create_character_vin.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/game_create_character_vin_arisha.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/game_create_character_vin_hagie.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/game_create_character_vin_lynn.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/game_start.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/game_start_neamhain_kalok.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/game_start_vin.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/h01.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/h03.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/h03_cut.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/lobby_event.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/lobby_fishingcraft.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/lobby_fishingcraft_night.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/lobby_fishingcraft_sunset.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/lobby_fishingcraft_winter.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/lobby_multiplayer.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/lobby_multiplayer_berbe.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/lobby_multiplayer_berbe_hall.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/lobby_multiplayer_guild.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/lobby_multiplayer_morvan.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/lobby_multiplayer_morvan_s.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/lobby_multiplayer_rochest.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/lobby_multiplayer_rochest_s.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/lobby_multiplayer_spring.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/minigame.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/minigame_wall.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/nolwenn.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/p02.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/p03.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/p04.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/p05.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/p06.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/p06_blacklight.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/p07.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/p_halloween.bsp': AssertionError('ORIGINAL_FACES\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/pve_competition.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/s3_00.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/s3_game_start.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/s3_lobby_multiplayer.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/s3_lobby_multiplayer_rochest.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/s3_lobby_multiplayer_rochest_w.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/s3_lobby_multiplayer_winter.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/sc_mini01.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/sc_mini02.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/sc_mini03.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/start_2018_children_089b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/start_2018_foolsday_089b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/start_2018_spring_089b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/start_2018_summer_089b.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/start_2020_lethor.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/t05_school.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/teaser_lethor.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/w_boss.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E         +  'maps/w_boss02.bsp': AssertionError('sprp\nassert 1 == 0\n  +1\n  -0'),
E           }

tests\test_bsp.py:77: AssertionError
_______________ test_load_bsp[E:/Mod-Titanfall/x360-map_dirs97] _______________

group_path = 'E:/Mod', game_name = 'Titanfall/x360', map_dirs = ['maps']

    @pytest.mark.parametrize("group_path,game_name,map_dirs", [(*gps, ms) for gps, ms in maplist.installed_games.items()])
    def test_load_bsp(group_path, game_name, map_dirs):
        """MEGATEST: 69GB+ of .bsp files!"""
        branch_script = game_scripts.get(game_name)
        # NOTE: this is ugly and results in quite a few errors
        # auto-detection really shouldn't have to rely on precise strings
        errors = dict()
        # ^ {"game": ["errors"]}
        types = set()
        # ^ {(BspClass, branch, version)}
        total = 0
        for map_dir in map_dirs:
            full_path = os.path.join(group_path, game_name, map_dir)
            if os.path.exists(full_path):
                files = os.listdir(full_path)
                maps = fnmatch.filter(files, "*[Bb][Ss][Pp]")  # .bsp, .BSP & CoD2 .d3dbsp
                total += len(maps)
                assert len(maps) != 0, f"couldn't find any maps for {game_name} in {map_dir}"
                for m in maps:  # load every .bsp
                    try:
                        bsp_filename = os.path.join(full_path, m)
                        if os.path.getsize(bsp_filename) == 0:
                            continue  # hl2/maps/d2_coast_02 is 0 bytes, idk why it shipped
                        if game_name == "half-life 2/episodic" and m == "ep1_citadel_00_demo.bsp":
                            continue  # broken HL2:EP1 map (game crashes on load)
                        elif game_name == "half-life 2/hl1" and m in ("c4a1y.bsp", "c4a1z.bsp"):
                            continue  # broken HL:Source maps (y is v18 and won't run, z is v19 and has broken IO)
>                       bsp = load_bsp(bsp_filename, branch_script)

tests\test_bsp.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
bsp_tool\__init__.py:97: in load_bsp
    return BspVariant(branch_script, filename, autoload=True)  # might raise errors
bsp_tool\respawn.py:147: in __init__
    super(RespawnBsp, self).__init__(branch, filename, autoload)
bsp_tool\valve.py:24: in __init__
    super(ValveBsp, self).__init__(branch, filename, autoload)
bsp_tool\base.py:35: in __init__
    self._preload()
bsp_tool\respawn.py:223: in _preload
    setattr(self, LUMP_name, shared.Entities(ent_file.read()))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = [{'editorclass': 'info_particle_system_clientside', 'VisibilityFlags': '7', 'start_active': '1', 'model': 'models/dev/..., 'effect_name': 'glow_imc_light03_wide', 'targetname': 'info_particle_system_2', 'classname': 'info_particle_system'}]
raw_entities = b'{\n"editorclass" "info_particle_system_clientside"\n"VisibilityFlags" "7"\n"start_active" "1"\n"model" "models/dev/e...00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

    def __init__(self, raw_entities: bytes):
        entities: List[Dict[str, str]] = list()
        # ^ [{"key": "value"}]
        # TODO: handle newlines in keys / values
        enumerated_lines = enumerate(raw_entities.decode(errors="ignore").splitlines())
        for line_no, line in enumerated_lines:
            if re.match(r"^\s*$", line):  # line is blank / whitespace
                continue
            if "{" in line:  # new entity
                ent = dict()
            elif '"' in line:
                key_value_pair = re.search(r'"([^"]*)"\s"([^"]*)"', line)
                if not key_value_pair:
                    open_key_value_pair = re.search(r'"([^"]*)"\s"([^"]*)', line)
                    if not open_key_value_pair:
                        RuntimeError(f"Unexpected line in entities: L{line_no}: {line.encode()}")
                    key, value = open_key_value_pair.groups()
                    # TODO: use regex to catch CRLF line endings & unexpected whitespace
                    tail = re.search(r'([^"]*)"\s*$', line)
                    while not tail:
                        if "{" in line or "}" in line:
                            RuntimeError(f"Unexpected line in entities: L{line_no}: {line.encode()}")
>                       line_no, line = next(enumerated_lines)
E                       StopIteration

bsp_tool\branches\shared.py:69: StopIteration
============================== warnings summary ===============================
tests/branches/test_branch_scripts.py::test_basic_branch_script[bsp_tool.branches.id_software.quake]
  C:\Users\Jared\Documents\GitHub\bsp_tool\tests\branches\test_branch_scripts.py:48: UserWarning: Unused LumpClasses in branch script:
  MipTexture
    warnings.warn(UserWarning(warning_text))

tests/branches/test_branch_scripts.py::test_basic_branch_script[bsp_tool.branches.infinity_ward.call_of_duty1]
  C:\Users\Jared\Documents\GitHub\bsp_tool\tests\branches\test_branch_scripts.py:48: UserWarning: Unused LumpClasses in branch script:
  PatchCollision
  Cell
  Brush
  Node
  Light
  Model
  Occluder
  DrawVertex
  AxisAlignedBoundingBox
  Portal
  CullGroup
    warnings.warn(UserWarning(warning_text))

tests/branches/test_branch_scripts.py::test_basic_branch_script[bsp_tool.branches.infinity_ward.call_of_duty2]
  C:\Users\Jared\Documents\GitHub\bsp_tool\tests\branches\test_branch_scripts.py:48: UserWarning: Unused LumpClasses in branch script:
  CollisionEdge
  Model
  CollisionTriangle
    warnings.warn(UserWarning(warning_text))

tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.arkane.dark_messiah_singleplayer]
  C:\Users\Jared\Documents\GitHub\bsp_tool\tests\branches\test_branch_scripts.py:83: UserWarning: Unused LumpClasses in branch script:
  Model
  TextureInfo
    warnings.warn(UserWarning(warning_text))

tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.respawn.titanfall]
  C:\Users\Jared\Documents\GitHub\bsp_tool\tests\branches\test_branch_scripts.py:83: UserWarning: Unused LumpClasses in branch script:
  Grid
    warnings.warn(UserWarning(warning_text))

tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.respawn.titanfall_x360]
  C:\Users\Jared\Documents\GitHub\bsp_tool\tests\branches\test_branch_scripts.py:83: UserWarning: Unused LumpClasses in branch script:
  Grid_x360
    warnings.warn(UserWarning(warning_text))

tests/branches/test_branch_scripts.py::test_branch_script[bsp_tool.branches.valve.orange_box_x360]
  C:\Users\Jared\Documents\GitHub\bsp_tool\tests\branches\test_branch_scripts.py:83: UserWarning: Unused LumpClasses in branch script:
  DisplacementInfo_x360
  Primitive_x360
    warnings.warn(UserWarning(warning_text))

-- Docs: https://docs.pytest.org/en/stable/warnings.html

---------- coverage: platform win32, python 3.9.10-final-0 -----------
Name                                                    Stmts   Miss  Cover
---------------------------------------------------------------------------
bsp_tool\__init__.py                                       55      4    93%
bsp_tool\base.py                                           66     29    56%
bsp_tool\branches\__init__.py                              30      0   100%
bsp_tool\branches\arkane\__init__.py                        3      0   100%
bsp_tool\branches\arkane\dark_messiah_multiplayer.py       16      0   100%
bsp_tool\branches\arkane\dark_messiah_singleplayer.py      48      0   100%
bsp_tool\branches\base.py                                 262     41    84%
bsp_tool\branches\gearbox\__init__.py                       3      0   100%
bsp_tool\branches\gearbox\blue_shift.py                    28      0   100%
bsp_tool\branches\gearbox\nightfire.py                     90      0   100%
bsp_tool\branches\id_software\__init__.py                   4      0   100%
bsp_tool\branches\id_software\quake.py                    180     14    92%
bsp_tool\branches\id_software\quake2.py                   106      0   100%
bsp_tool\branches\id_software\quake3.py                   167     10    94%
bsp_tool\branches\infinity_ward\__init__.py                 4      0   100%
bsp_tool\branches\infinity_ward\call_of_duty1.py          147      6    96%
bsp_tool\branches\infinity_ward\call_of_duty2.py          133      1    99%
bsp_tool\branches\infinity_ward\modern_warfare.py          63      0   100%
bsp_tool\branches\ion_storm\__init__.py                     2      0   100%
bsp_tool\branches\ion_storm\daikatana.py                   13      0   100%
bsp_tool\branches\loiste\__init__.py                        2      0   100%
bsp_tool\branches\loiste\infra.py                          79      0   100%
bsp_tool\branches\nexon\__init__.py                         4      0   100%
bsp_tool\branches\nexon\cso2.py                           103      6    94%
bsp_tool\branches\nexon\cso2_2018.py                       18      0   100%
bsp_tool\branches\nexon\vindictus.py                      236      9    96%
bsp_tool\branches\physics.py                              139     52    63%
bsp_tool\branches\py_struct_as_cpp.py                     171    171     0%
bsp_tool\branches\raven\__init__.py                         4      0   100%
bsp_tool\branches\raven\hexen2.py                          12      0   100%
bsp_tool\branches\raven\soldier_of_fortune.py              14      0   100%
bsp_tool\branches\raven\soldier_of_fortune2.py             32      0   100%
bsp_tool\branches\respawn\__init__.py                       5      0   100%
bsp_tool\branches\respawn\apex_legends.py                 268     22    92%
bsp_tool\branches\respawn\titanfall.py                    526     85    84%
bsp_tool\branches\respawn\titanfall2.py                   215      4    98%
bsp_tool\branches\respawn\titanfall_x360.py                52     17    67%
bsp_tool\branches\ritual\__init__.py                        5      0   100%
bsp_tool\branches\ritual\fakk2.py                          57      0   100%
bsp_tool\branches\ritual\moh_allied_assault.py             74      0   100%
bsp_tool\branches\ritual\sin.py                            14      0   100%
bsp_tool\branches\ritual\star_trek_elite_force2.py         72      0   100%
bsp_tool\branches\shared.py                               100     30    70%
bsp_tool\branches\troika\__init__.py                        2      0   100%
bsp_tool\branches\troika\vampire.py                        36      0   100%
bsp_tool\branches\valve\__init__.py                        10      0   100%
bsp_tool\branches\valve\alien_swarm.py                     81      0   100%
bsp_tool\branches\valve\goldsrc.py                         78      0   100%
bsp_tool\branches\valve\left4dead.py                       82      0   100%
bsp_tool\branches\valve\left4dead2.py                      83      0   100%
bsp_tool\branches\valve\orange_box.py                     131     10    92%
bsp_tool\branches\valve\orange_box_x360.py                109     10    91%
bsp_tool\branches\valve\sdk_2013.py                        82      0   100%
bsp_tool\branches\valve\sdk_2013_x360.py                   17      0   100%
bsp_tool\branches\valve\source.py                         595    111    81%
bsp_tool\branches\vector.py                               175    121    31%
bsp_tool\branches\x360.py                                  15      0   100%
bsp_tool\extensions\__init__.py                             0      0   100%
bsp_tool\extensions\archive.py                             70     70     0%
bsp_tool\extensions\decrypt_xor.py                         11     11     0%
bsp_tool\extensions\diff.py                               111    111     0%
bsp_tool\extensions\lightmaps.py                          191    191     0%
bsp_tool\extensions\mprt.py                                12     12     0%
bsp_tool\id_software.py                                    77      9    88%
bsp_tool\infinity_ward.py                                  69     10    86%
bsp_tool\lumps\__init__.py                                279     69    75%
bsp_tool\raven.py                                           3      0   100%
bsp_tool\respawn.py                                       246    141    43%
bsp_tool\ritual.py                                         45      3    93%
bsp_tool\valve.py                                         134     68    49%
---------------------------------------------------------------------------
TOTAL                                                    6366   1448    77%

=========================== short test summary info ===========================
FAILED tests/test_bsp.py::test_load_bsp[E:/Mod-Quake/rerelease-map_dirs73] - ...
FAILED tests/test_bsp.py::test_load_bsp[E:/Mod-Alkaline-map_dirs74] - NotImpl...
FAILED tests/test_bsp.py::test_load_bsp[E:/Mod-Warsow-map_dirs78] - NotImplem...
FAILED tests/test_bsp.py::test_load_bsp[E:/Mod-CSO2-map_dirs87] - AssertionEr...
FAILED tests/test_bsp.py::test_load_bsp[E:/Mod-DarkMessiah/singleplayer-map_dirs88]
FAILED tests/test_bsp.py::test_load_bsp[E:/Mod-Vindictus-map_dirs95] - Assert...
FAILED tests/test_bsp.py::test_load_bsp[E:/Mod-Titanfall/x360-map_dirs97] - S...
=========== 7 failed, 169 passed, 7 warnings in 6734.28s (1:52:14) ============
